"""Copy of DPL_EDA_PDS_heart_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sm7zDr2PvvL6UtXOD51xao3xLosmbUns

# HEART DATASET

### Imports and Dataset Description
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# from google.colab import drive
# drive.mount('/content/drive')

df1 = pd.read_csv("heart(1).csv")
df2 = pd.read_csv('heart.csv')
df = pd.concat([df1, df2], ignore_index=True)

# df

# df.isna().sum()

# df.describe()

# df.shape

# del df['exang']
# del df['oldpeak']

# """### Correlation Heat Map"""

# plt.figure(figsize=(15,15))
# sns.heatmap(df.corr(), cmap = "YlGnBu", annot=True)

"""## KNN Classification

"""

features = df.columns[0:12].values.tolist()
x = df[features]
y = df['target']

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size=0.1, random_state=100)

from sklearn.neighbors import KNeighborsClassifier as knn

k = np.arange(1,21,1)

train_score = []

for i in k:
  model = knn(n_neighbors=i)
  model.fit(X_train,Y_train)
  train_score.append(model.score(X_train, Y_train))
  y_test_pred = model.predict(X_test)

print(train_score)

# plt.plot(train_score)
# plt.title("Training Accuracy Vs Number of Neighbours")
# plt.ylabel("Model Accuracy Score")
# plt.xlabel("Number of Neighbours")
# plt.xticks(np.arange(0,22, step=1))
# plt.legend(['Train Score'])

model  = knn(n_neighbors=3)

model = model.fit(X_train, Y_train)

y_pred = model.predict(X_test)

"""### Accuracy"""

# from sklearn.metrics import accuracy_score

# accuracy = accuracy_score(Y_test,y_pred)*100
# accuracy

# """### Precision"""

# from sklearn.metrics import precision_score

# precision = precision_score(Y_test, y_pred, average='binary')

# precision

# """### Recall

# """

# from sklearn.metrics import recall_score

# recall = recall_score(Y_test, y_pred, average='binary')
# recall

# """### F1 Score"""

# from sklearn.metrics import f1_score

# f1score = f1_score(Y_test, y_pred)
# f1score

# """### Jaccards Index"""

# from sklearn.metrics import jaccard_score

# jaccard = jaccard_score(Y_test, y_pred, average='binary')
# print(f"Jaccard Score: {jaccard}")

# """###AUC-ROC Curve"""

# from sklearn.metrics import auc, roc_curve

# y_scores = model.predict_proba(X_test)[:,1]

# fpr, tpr, thresholds = roc_curve(Y_test, y_scores)

# auc_roc = auc(fpr, tpr)

# plt.figure()
# plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % auc_roc)
# plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
# plt.xlim([0.0, 1.0])
# plt.ylim([0.0, 1.05])
# plt.xlabel('False Positive Rate')
# plt.ylabel('True Positive Rate')
# plt.title('Receiver Operating Characteristic')
# plt.legend(loc="lower right")
# plt.show()

# """## Confusion Matrix"""

# from sklearn.metrics import confusion_matrix

# confusion = pd.DataFrame(confusion_matrix(Y_test, y_pred), columns=['Negative','Positive',], index=['Negative','Positive'])
# confusion

# """## True Positive Rate"""

# true_positive = confusion.loc['Positive']['Positive']
# true_positive

# """## False Positive Rate"""

# false_positive = confusion.loc['Negative']['Positive']
# false_positive

# """## Sensitivity Analysis"""

# # !pip install sensitivity
# type(df)

# # from sensitivity import SensitivityAnalyzer

# # sa = SensitivityAnalyzer(df, y_pred_class)
# # sa.df

# """#EDA

# ## Barplot of Age VS Number of Heart Patients
# """

# import matplotlib.pyplot as plt
# import seaborn as sns
# import pandas as pd

# df1 = df[['age', 'target']]
# df1 = df1[df1['target']==1]
# df1 = pd.DataFrame(df1.groupby('age')['target'].count())

# plt.figure(figsize = (10, 10))

# sns.barplot(df1, x = df1.index, y = "target")
# plt.xlabel('Age')
# plt.ylabel('Number of Heart Patients')
# plt.title('Number of Heart Patients VS Age')
# plt.show()

# """## Joint-Plot of Age VS Systolic Blood Pressure in Heart Patients

# """

# df2 = df[['age', 'trestbps','target']]

# plt.figure(figsize = (20, 20))

# sns.jointplot(data = df2[df2['target']==1], x ='age', y ='trestbps', kind='kde', fill=True)
# plt.xlabel('Age')
# plt.ylabel('Resting Time Systolic Blood Pressure')
# plt.show()

# """## Histogram of Patients VS Cholesterol Level"""

# df2 = df[['chol', 'target']]
# df2 = df[df['target']==1]
# df2 = pd.DataFrame(df2.groupby('chol')['target'].count())

# plt.hist(x = df2.index)
# plt.xlabel('Cholesterol')
# plt.ylabel('count')
# plt.title('Number of Patients with Heart Disease VS Cholesterol Level')
# plt.show()

# """## Piechart"""

# df3 = df[['sex', 'target']].copy()

# df3['sex'].replace(0, 2, inplace=True)
# df3['target'].replace(0, np.nan, inplace = True)
# df3.dropna(inplace=True)

# plt.pie(df3['sex'].value_counts(), labels=['Male', 'Female'],  autopct='%1.1f%%')
# plt.title('Distribution of Gender')
# plt.show()

# """## Barchart"""

# df4 = df[['thalach', 'target']].copy()

# plt.figure(figsize=(40, 20))
# sns.countplot(data=df4, x='thalach', hue='target', palette='Set1')

# plt.xlabel('thalach')
# plt.ylabel('Count')

# plt.title('Grouped Bar Chart of thalach between patients with heartdisease')
# plt.legend(title='Target', labels=['No Disease', 'Disease'])
# plt.show()

"""# Model Deployment"""

import streamlit as st

def main():
    st.title('Heart Disease Prediction using kNN')
    st.write('This app uses kNN to predict whether a patient has heart disease or not')

    # Collect input features from the user
    age = st.slider('Age', 25, 70)
    sex = st.radio('Sex', ["***MALE***","***FEMALE***"])
    cp = st.slider('Chest Pain',0, 4)
    trestbps = st.slider('Resting Systolic Blood Pressure (during admission in hospital) in mm/Hg', 95, 200)
    chol = st.slider("Cholesterol level in mg/dl",126,564)
    fbs = st.radio("Is Fasting Blood Sugar > 120 mg/dl", ["YES","NO"])
    restecg = st.radio("Resting ECG Result", ['0','1','2','3'])
    thalach = st.slider("Maximum Heart Rate Achieved", 70,200)
    slope = st.radio("Slope of Peak Exercise ST Segment", ['0','1','2'])
    ca = st.radio("Number of Major Vessels colored by Flourosopy", ['0','1','2','3','4'])
    thal = st.radio("Thalassemia", ['Normal', 'Fixed Defect', 'Reversible Defect'])

    if sex == "MALE":
      sex = 1
    else:
      sex = 0

    if fbs == "YES":
      fbs = 1
    else:
      fbs = 0

    if thal == "Normal":
      thal = 1
    elif thal == 'Fixed Defect':
      thal = 2
    else:
      thal = 3

    # Create a feature array with the user's input
    features = np.array([[age,sex,cp,trestbps,chol,fbs,restecg, thalach, slope, ca, thal]])

    # Make predictions using the kNN model
    prediction = knn.predict(features)

    # Display the prediction
    st.write(f'Predicted Iris Species: {prediction}')

if __name__ == '__main__':
    main()